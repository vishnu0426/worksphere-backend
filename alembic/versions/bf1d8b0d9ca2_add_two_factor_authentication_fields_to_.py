"""Add two factor authentication fields to users

Revision ID: bf1d8b0d9ca2
Revises: add_allowed_domains
Create Date: 2025-08-06 23:10:01.877363

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'bf1d8b0d9ca2'
down_revision = 'add_allowed_domains'
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Drop api_key_usage first due to foreign key constraint
    # COMMENTED OUT: These tables have dependencies and cause migration failures
    # op.drop_table('api_key_usage')
    # op.drop_table('api_keys')
    # op.drop_table('security_events')
    # op.drop_table('analytics_reports')
    # COMMENTED OUT: All drop table commands to prevent dependency errors
    # op.drop_table('data_retention_policies')
    # op.drop_table('gdpr_requests')
    # op.drop_table('integrations')
    # op.drop_table('custom_field_values')
    # op.drop_table('external_accounts')
    # op.drop_table('workflow_rules')
    # op.drop_table('dashboard_widgets')
    # op.drop_table('smart_notifications')
    # op.drop_table('compliance_audits')
    # op.drop_table('consent_records')
    # op.drop_table('metric_snapshots')
    # op.drop_table('security_alerts')
    # op.drop_table('custom_fields')
    # op.drop_table('data_exports')
    # op.drop_table('ai_predictions')
    # op.drop_table('integration_templates')
    # op.drop_table('report_executions')
    # op.drop_table('workflow_executions')
    # op.drop_table('bulk_operation_logs')
    # op.drop_table('ai_insights')
    # op.drop_table('integration_sync_logs')
    # op.drop_table('bulk_user_operations')
    # op.drop_table('automation_templates')
    # op.drop_table('ai_models')
    # op.drop_table('performance_metrics')
    # op.drop_table('organization_templates')
    # op.drop_table('ai_generated_projects')
    # op.drop_table('backup_records')
    # op.drop_table('webhook_events')
    op.alter_column('boards', 'project_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('boards', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('boards', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('boards', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_boards_project_id'), table_name='boards')
    op.add_column('card_assignments', sa.Column('assigned_by', sa.UUID(), nullable=True))
    op.alter_column('card_assignments', 'card_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('card_assignments', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('card_assignments', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_constraint(op.f('card_assignments_card_id_user_id_key'), 'card_assignments', type_='unique')
    op.drop_index(op.f('idx_card_assignments_card_id'), table_name='card_assignments')
    op.drop_index(op.f('idx_card_assignments_user_id'), table_name='card_assignments')
    op.create_unique_constraint('unique_card_user_assignment', 'card_assignments', ['card_id', 'user_id'])
    op.create_foreign_key(op.f('fk_card_assignments_assigned_by_users'), 'card_assignments', 'users', ['assigned_by'], ['id'])
    op.alter_column('cards', 'column_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('cards', 'priority',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               nullable=False,
               existing_server_default=sa.text("'medium'::character varying"))
    op.alter_column('cards', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('cards', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('cards', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_cards_column_id'), table_name='cards')
    op.drop_index(op.f('idx_cards_priority'), table_name='cards')
    op.drop_constraint(op.f('cards_assigned_to_fkey'), 'cards', type_='foreignkey')
    op.drop_column('cards', 'assigned_to')
    op.add_column('checklist_items', sa.Column('ai_generated', sa.Boolean(), nullable=False))
    op.add_column('checklist_items', sa.Column('confidence', sa.Integer(), nullable=True))
    op.add_column('checklist_items', sa.Column('ai_metadata', sa.JSON(), nullable=True))
    op.add_column('checklist_items', sa.Column('created_by', sa.UUID(), nullable=False))
    op.alter_column('checklist_items', 'card_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('checklist_items', 'completed',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('checklist_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('checklist_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_checklist_items_card_id'), table_name='checklist_items')
    op.create_foreign_key(op.f('fk_checklist_items_created_by_users'), 'checklist_items', 'users', ['created_by'], ['id'])
    op.alter_column('columns', 'board_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('columns', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('columns', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_columns_board_id'), table_name='columns')
    op.drop_constraint(op.f('columns_created_by_fkey'), 'columns', type_='foreignkey')
    op.drop_column('columns', 'created_by')
    op.drop_column('columns', 'status')
    op.add_column('organization_members', sa.Column('invited_by', sa.UUID(), nullable=True))
    op.add_column('organization_members', sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False))
    op.alter_column('organization_members', 'organization_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('organization_members', 'user_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('organization_members', 'role',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'member'::character varying"))
    op.alter_column('organization_members', 'joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_organization_members_org_id'), table_name='organization_members')
    op.drop_index(op.f('idx_organization_members_user_id'), table_name='organization_members')
    op.drop_constraint(op.f('organization_members_organization_id_user_id_key'), 'organization_members', type_='unique')
    op.create_unique_constraint('unique_org_user', 'organization_members', ['organization_id', 'user_id'])
    op.create_foreign_key(op.f('fk_organization_members_invited_by_users'), 'organization_members', 'users', ['invited_by'], ['id'])
    op.add_column('organizations', sa.Column('website', sa.String(length=255), nullable=True))
    op.add_column('organizations', sa.Column('industry', sa.String(length=100), nullable=True))
    op.add_column('organizations', sa.Column('size', sa.String(length=50), nullable=True))
    op.add_column('organizations', sa.Column('timezone', sa.String(length=100), nullable=False))
    op.add_column('organizations', sa.Column('language', sa.String(length=10), nullable=False))
    op.add_column('organizations', sa.Column('parent_id', sa.UUID(), nullable=True))
    op.add_column('organizations', sa.Column('organization_type', sa.String(length=50), nullable=False))
    op.add_column('organizations', sa.Column('allow_cross_org_collaboration', sa.Boolean(), nullable=False))
    op.add_column('organizations', sa.Column('collaboration_domains', postgresql.ARRAY(sa.Text()), nullable=True))
    op.alter_column('organizations', 'allowed_domains',
               existing_type=postgresql.ARRAY(sa.VARCHAR(length=255)),
               type_=postgresql.ARRAY(sa.Text()),
               comment=None,
               existing_comment='List of allowed email domains for this organization',
               existing_nullable=True)
    op.alter_column('organizations', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.create_foreign_key(op.f('fk_organizations_parent_id_organizations'), 'organizations', 'organizations', ['parent_id'], ['id'])
    op.drop_column('organizations', 'domain')
    op.add_column('projects', sa.Column('start_date', sa.Date(), nullable=True))
    op.add_column('projects', sa.Column('due_date', sa.Date(), nullable=True))
    op.add_column('projects', sa.Column('configuration', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('overview', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('tech_stack', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('workflow', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('tasks', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('notifications', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('launch_options', sa.JSON(), nullable=True))
    op.add_column('projects', sa.Column('finalized_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('projects', 'organization_id',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('projects', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=False,
               existing_server_default=sa.text("'planning'::character varying"))
    op.alter_column('projects', 'priority',
               existing_type=sa.VARCHAR(length=50),
               type_=sa.String(length=20),
               nullable=False,
               existing_server_default=sa.text("'medium'::character varying"))
    op.alter_column('projects', 'created_by',
               existing_type=sa.UUID(),
               nullable=False)
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_projects_org_id'), table_name='projects')
    op.drop_index(op.f('idx_projects_status'), table_name='projects')
    op.drop_column('projects', 'progress')
    op.add_column('users', sa.Column('two_factor_enabled', sa.Boolean(), nullable=False))
    op.add_column('users', sa.Column('two_factor_secret', sa.String(length=255), nullable=True))
    op.add_column('users', sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True))
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=False)
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=False,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=False,
               existing_server_default=sa.text('now()'))
    op.drop_index(op.f('idx_users_email'), table_name='users')
    op.drop_constraint(op.f('users_email_key'), 'users', type_='unique')
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.drop_column('users', 'is_active')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('users', sa.Column('is_active', sa.BOOLEAN(), server_default=sa.text('true'), autoincrement=False, nullable=False))
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.create_unique_constraint(op.f('users_email_key'), 'users', ['email'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_users_email'), 'users', ['email'], unique=False)
    op.alter_column('users', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('users', 'email_verified',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('users', 'last_name',
               existing_type=sa.VARCHAR(length=100),
               nullable=True)
    op.drop_column('users', 'last_login_at')
    op.drop_column('users', 'two_factor_secret')
    op.drop_column('users', 'two_factor_enabled')
    op.add_column('projects', sa.Column('progress', sa.INTEGER(), server_default=sa.text('0'), autoincrement=False, nullable=True))
    op.create_index(op.f('idx_projects_status'), 'projects', ['status'], unique=False)
    op.create_index(op.f('idx_projects_org_id'), 'projects', ['organization_id'], unique=False)
    op.alter_column('projects', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('projects', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('projects', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('projects', 'priority',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'medium'::character varying"))
    op.alter_column('projects', 'status',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'planning'::character varying"))
    op.alter_column('projects', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('projects', 'finalized_at')
    op.drop_column('projects', 'launch_options')
    op.drop_column('projects', 'notifications')
    op.drop_column('projects', 'tasks')
    op.drop_column('projects', 'workflow')
    op.drop_column('projects', 'tech_stack')
    op.drop_column('projects', 'overview')
    op.drop_column('projects', 'configuration')
    op.drop_column('projects', 'due_date')
    op.drop_column('projects', 'start_date')
    op.add_column('organizations', sa.Column('domain', sa.VARCHAR(length=255), autoincrement=False, nullable=True))
    op.drop_constraint(op.f('fk_organizations_parent_id_organizations'), 'organizations', type_='foreignkey')
    op.alter_column('organizations', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('organizations', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('organizations', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('organizations', 'allowed_domains',
               existing_type=postgresql.ARRAY(sa.Text()),
               type_=postgresql.ARRAY(sa.VARCHAR(length=255)),
               comment='List of allowed email domains for this organization',
               existing_nullable=True)
    op.drop_column('organizations', 'collaboration_domains')
    op.drop_column('organizations', 'allow_cross_org_collaboration')
    op.drop_column('organizations', 'organization_type')
    op.drop_column('organizations', 'parent_id')
    op.drop_column('organizations', 'language')
    op.drop_column('organizations', 'timezone')
    op.drop_column('organizations', 'size')
    op.drop_column('organizations', 'industry')
    op.drop_column('organizations', 'website')
    op.drop_constraint(op.f('fk_organization_members_invited_by_users'), 'organization_members', type_='foreignkey')
    op.drop_constraint('unique_org_user', 'organization_members', type_='unique')
    op.create_unique_constraint(op.f('organization_members_organization_id_user_id_key'), 'organization_members', ['organization_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.create_index(op.f('idx_organization_members_user_id'), 'organization_members', ['user_id'], unique=False)
    op.create_index(op.f('idx_organization_members_org_id'), 'organization_members', ['organization_id'], unique=False)
    op.alter_column('organization_members', 'joined_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('organization_members', 'role',
               existing_type=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'member'::character varying"))
    op.alter_column('organization_members', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('organization_members', 'organization_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('organization_members', 'created_at')
    op.drop_column('organization_members', 'invited_by')
    op.add_column('columns', sa.Column('status', sa.VARCHAR(length=50), server_default=sa.text("'active'::character varying"), autoincrement=False, nullable=True))
    op.add_column('columns', sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('columns_created_by_fkey'), 'columns', 'users', ['created_by'], ['id'])
    op.create_index(op.f('idx_columns_board_id'), 'columns', ['board_id'], unique=False)
    op.alter_column('columns', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('columns', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('columns', 'board_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(op.f('fk_checklist_items_created_by_users'), 'checklist_items', type_='foreignkey')
    op.create_index(op.f('idx_checklist_items_card_id'), 'checklist_items', ['card_id'], unique=False)
    op.alter_column('checklist_items', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('checklist_items', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('checklist_items', 'completed',
               existing_type=sa.BOOLEAN(),
               nullable=True,
               existing_server_default=sa.text('false'))
    op.alter_column('checklist_items', 'card_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('checklist_items', 'created_by')
    op.drop_column('checklist_items', 'ai_metadata')
    op.drop_column('checklist_items', 'confidence')
    op.drop_column('checklist_items', 'ai_generated')
    op.add_column('cards', sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True))
    op.create_foreign_key(op.f('cards_assigned_to_fkey'), 'cards', 'users', ['assigned_to'], ['id'])
    op.create_index(op.f('idx_cards_priority'), 'cards', ['priority'], unique=False)
    op.create_index(op.f('idx_cards_column_id'), 'cards', ['column_id'], unique=False)
    op.alter_column('cards', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cards', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('cards', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('cards', 'priority',
               existing_type=sa.String(length=20),
               type_=sa.VARCHAR(length=50),
               nullable=True,
               existing_server_default=sa.text("'medium'::character varying"))
    op.alter_column('cards', 'column_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_constraint(op.f('fk_card_assignments_assigned_by_users'), 'card_assignments', type_='foreignkey')
    op.drop_constraint('unique_card_user_assignment', 'card_assignments', type_='unique')
    op.create_index(op.f('idx_card_assignments_user_id'), 'card_assignments', ['user_id'], unique=False)
    op.create_index(op.f('idx_card_assignments_card_id'), 'card_assignments', ['card_id'], unique=False)
    op.create_unique_constraint(op.f('card_assignments_card_id_user_id_key'), 'card_assignments', ['card_id', 'user_id'], postgresql_nulls_not_distinct=False)
    op.alter_column('card_assignments', 'assigned_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('card_assignments', 'user_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('card_assignments', 'card_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.drop_column('card_assignments', 'assigned_by')
    op.create_index(op.f('idx_boards_project_id'), 'boards', ['project_id'], unique=False)
    op.alter_column('boards', 'updated_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('boards', 'created_at',
               existing_type=postgresql.TIMESTAMP(timezone=True),
               nullable=True,
               existing_server_default=sa.text('now()'))
    op.alter_column('boards', 'created_by',
               existing_type=sa.UUID(),
               nullable=True)
    op.alter_column('boards', 'project_id',
               existing_type=sa.UUID(),
               nullable=True)
    op.create_table('webhook_events',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('integration_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('event_source', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('payload', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('headers', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('signature', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('processing_attempts', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_attempt', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('processed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], name=op.f('fk_webhook_events_integration_id_integrations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_webhook_events_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_webhook_events'))
    )
    op.create_table('backup_records',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('backup_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('backup_scope', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('compression_type', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('encryption_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('checksum', sa.VARCHAR(length=128), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('retention_until', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_backup_records_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_backup_records_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_backup_records'))
    )
    op.create_table('ai_generated_projects',
    sa.Column('id', sa.UUID(), server_default=sa.text('gen_random_uuid()'), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('generated_tasks', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('ai_generated_projects_created_by_fkey')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('ai_generated_projects_organization_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('ai_generated_projects_pkey'))
    )
    op.create_table('organization_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('industry', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('default_roles', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_projects', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('default_workflows', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("is_public::text = ANY (ARRAY['public'::character varying, 'private'::character varying, 'organization'::character varying]::text[])", name=op.f('ck_organization_templates_valid_visibility')),
    sa.CheckConstraint("template_type::text = ANY (ARRAY['startup'::character varying, 'agency'::character varying, 'enterprise'::character varying, 'custom'::character varying]::text[])", name=op.f('ck_organization_templates_valid_template_type')),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_organization_templates_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_organization_templates_organization_id_organizations')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_organization_templates'))
    )
    op.create_table('performance_metrics',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('metric_category', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('target_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('measurement_period', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('measurement_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('metric_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_performance_metrics_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_performance_metrics_project_id_projects'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_performance_metrics_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_performance_metrics'))
    )
    op.create_table('ai_models',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('model_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('model_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('model_version', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('training_data_info', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('performance_metrics', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_trained', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_trained', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.PrimaryKeyConstraint('id', name='pk_ai_models'),
    postgresql_ignore_search_path=False
    )
    op.create_table('automation_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('category', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('template_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('use_cases', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_featured', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('rating', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_automation_templates_created_by_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_automation_templates'))
    )
    op.create_table('api_key_usage',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('api_key_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('endpoint', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('method', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('status_code', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('response_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('ip_address', sa.VARCHAR(length=45), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('request_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('response_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['api_key_id'], ['api_keys.id'], name=op.f('fk_api_key_usage_api_key_id_api_keys'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_key_usage'))
    )
    op.create_table('bulk_user_operations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('operation_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('total_records', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('processed_records', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('successful_records', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('failed_records', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('result_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.CheckConstraint("operation_type::text = ANY (ARRAY['import'::character varying, 'export'::character varying, 'bulk_invite'::character varying, 'bulk_update'::character varying, 'bulk_delete'::character varying]::text[])", name='ck_bulk_user_operations_valid_operation_type'),
    sa.CheckConstraint("status::text = ANY (ARRAY['pending'::character varying, 'processing'::character varying, 'completed'::character varying, 'failed'::character varying, 'cancelled'::character varying]::text[])", name='ck_bulk_user_operations_valid_operation_status'),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='fk_bulk_user_operations_created_by_users'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_bulk_user_operations_organization_id_organizations', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_bulk_user_operations'),
    postgresql_ignore_search_path=False
    )
    op.create_table('integration_sync_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('integration_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('sync_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('records_processed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_created', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_updated', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('records_failed', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('sync_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('duration_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['integration_id'], ['integrations.id'], name=op.f('fk_integration_sync_logs_integration_id_integrations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_integration_sync_logs'))
    )
    op.create_table('ai_insights',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('insight_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('insight_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('confidence_level', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('impact_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('actionable_items', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('related_entities', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_dismissed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('dismissed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('dismissed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['dismissed_by'], ['users.id'], name=op.f('fk_ai_insights_dismissed_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_ai_insights_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_insights'))
    )
    op.create_table('bulk_operation_logs',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('bulk_operation_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('record_index', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('record_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('operation_result', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.CheckConstraint("operation_result::text = ANY (ARRAY['success'::character varying, 'failed'::character varying, 'skipped'::character varying]::text[])", name=op.f('ck_bulk_operation_logs_valid_operation_result')),
    sa.ForeignKeyConstraint(['bulk_operation_id'], ['bulk_user_operations.id'], name=op.f('fk_bulk_operation_logs_bulk_operation_id_bulk_user_operations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_user_id'], ['users.id'], name=op.f('fk_bulk_operation_logs_created_user_id_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_bulk_operation_logs'))
    )
    op.create_table('workflow_executions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('rule_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('trigger_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('execution_status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('actions_performed', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_results', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('error_details', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['rule_id'], ['workflow_rules.id'], name=op.f('fk_workflow_executions_rule_id_workflow_rules'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_executions'))
    )
    op.create_table('report_executions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('report_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('execution_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('result_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('file_format', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('execution_time_ms', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('record_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('executed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('started_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['executed_by'], ['users.id'], name=op.f('fk_report_executions_executed_by_users')),
    sa.ForeignKeyConstraint(['report_id'], ['analytics_reports.id'], name=op.f('fk_report_executions_report_id_analytics_reports'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_report_executions'))
    )
    op.create_table('integration_templates',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('template_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('integration_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('configuration_schema', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('default_configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('required_permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('setup_instructions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_integration_templates_created_by_users')),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_integration_templates'))
    )
    op.create_table('ai_predictions',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('model_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('prediction_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('input_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('prediction_result', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('confidence_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('is_accepted', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('feedback_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['model_id'], ['ai_models.id'], name=op.f('fk_ai_predictions_model_id_ai_models'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_ai_predictions_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_ai_predictions'))
    )
    op.create_table('data_exports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('export_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('export_format', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('file_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=False),
    sa.Column('file_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('filters', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('record_count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('error_message', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_data_exports_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_data_exports_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_data_exports'))
    )
    op.create_table('custom_fields',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('field_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('field_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('entity_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('field_options', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('validation_rules', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_required', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_searchable', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('display_order', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='fk_custom_fields_created_by_users'),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name='fk_custom_fields_organization_id_organizations', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='pk_custom_fields'),
    postgresql_ignore_search_path=False
    )
    op.create_table('security_alerts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('alert_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('affected_resources', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('detection_method', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('alert_source', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('assigned_to', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('escalation_level', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('response_actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['assigned_to'], ['users.id'], name=op.f('fk_security_alerts_assigned_to_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_security_alerts_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_security_alerts'))
    )
    op.create_table('metric_snapshots',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('metric_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('metric_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('metric_value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('metric_unit', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('dimensions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('snapshot_date', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_metric_snapshots_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_metric_snapshots'))
    )
    op.create_table('consent_records',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('consent_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('consent_given', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('consent_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('legal_basis', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('purpose_description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('data_categories', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('retention_period', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('third_party_sharing', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('withdrawal_method', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('consent_version', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('withdrawn_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_consent_records_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_consent_records_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_consent_records'))
    )
    op.create_table('compliance_audits',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('audit_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('audit_scope', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('compliance_framework', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('auditor_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('auditor_organization', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('findings', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('compliance_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('report_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('remediation_plan', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('next_audit_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_compliance_audits_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_compliance_audits_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_compliance_audits'))
    )
    op.create_table('smart_notifications',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('notification_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('message', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('context_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('ai_generated', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('personalization_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('delivery_method', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('scheduled_for', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('delivered_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('read_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('action_taken', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('effectiveness_score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_smart_notifications_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_smart_notifications_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_smart_notifications'))
    )
    op.create_table('dashboard_widgets',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('widget_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('widget_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('position_x', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('position_y', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('width', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('height', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_visible', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('refresh_interval', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_dashboard_widgets_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_dashboard_widgets_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_dashboard_widgets'))
    )
    op.create_table('workflow_rules',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('project_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('rule_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('trigger_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('trigger_conditions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('actions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('priority', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('execution_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_executed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_workflow_rules_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_workflow_rules_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['project_id'], ['projects.id'], name=op.f('fk_workflow_rules_project_id_projects'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_workflow_rules'))
    )
    op.create_table('external_accounts',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('provider', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('provider_user_id', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('provider_username', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('provider_email', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('access_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('refresh_token', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('token_expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('scope', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('account_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_sync', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_external_accounts_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_external_accounts_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_external_accounts'))
    )
    op.create_table('custom_field_values',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('field_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('entity_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('value_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('value_number', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('value_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('value_boolean', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('value_json', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['custom_fields.id'], name=op.f('fk_custom_field_values_field_id_custom_fields'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_custom_field_values'))
    )
    op.create_table('integrations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('integration_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('credentials', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('webhook_url', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('webhook_secret', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('sync_enabled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('sync_frequency', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_sync', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('last_error', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('error_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_integrations_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_integrations_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_integrations'))
    )
    op.create_table('gdpr_requests',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('request_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('status', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('requester_email', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('requester_name', sa.VARCHAR(length=255), autoincrement=False, nullable=True),
    sa.Column('request_details', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('verification_method', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('verification_completed', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('response_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('response_file_path', sa.VARCHAR(length=500), autoincrement=False, nullable=True),
    sa.Column('rejection_reason', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('processed_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('due_date', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_gdpr_requests_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['processed_by'], ['users.id'], name=op.f('fk_gdpr_requests_processed_by_users')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_gdpr_requests_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_gdpr_requests'))
    )
    op.create_table('data_retention_policies',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('policy_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('data_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('retention_period_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('auto_delete', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('archive_before_delete', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('legal_basis', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_data_retention_policies_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_data_retention_policies_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_data_retention_policies'))
    )
    op.create_table('analytics_reports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('report_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('report_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('configuration', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('chart_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('schedule_config', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('is_public', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('is_scheduled', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('created_by', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('last_generated', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name=op.f('fk_analytics_reports_created_by_users')),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_analytics_reports_organization_id_organizations'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_analytics_reports'))
    )
    op.create_table('security_events',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('event_type', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('severity', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('event_source', sa.VARCHAR(length=100), autoincrement=False, nullable=False),
    sa.Column('ip_address', postgresql.INET(), autoincrement=False, nullable=True),
    sa.Column('user_agent', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('event_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('risk_score', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('is_resolved', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('resolved_by', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('resolution_notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_security_events_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['resolved_by'], ['users.id'], name=op.f('fk_security_events_resolved_by_users')),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_security_events_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_security_events'))
    )
    op.create_table('api_keys',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('organization_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('key_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('key_hash', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('key_prefix', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('rate_limit', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('is_active', sa.BOOLEAN(), autoincrement=False, nullable=False),
    sa.Column('last_used', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('usage_count', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], name=op.f('fk_api_keys_organization_id_organizations'), ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name=op.f('fk_api_keys_user_id_users'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_api_keys'))
    )
    # ### end Alembic commands ###
